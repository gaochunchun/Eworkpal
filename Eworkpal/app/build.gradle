apply plugin: 'com.android.application'

//定义打包时间函数
/*def packageTime() {
    return new Date().format("yyyy-MM-dd-HH-mm", TimeZone.getTimeZone("UTC"))
}*/

//获取local.properties的内容
/*Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())*/

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.mainiway.eworkpal'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    sourceSets{                     //直接在libs里面添加so库，不用创建jniLibs文件夹
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    // 签名文件
    /*signingConfigs {
        release {
            // relase签名----在local.properties 文件里面配置
            storeFile file(properties.getProperty("keystroe_storeFile"))
            storePassword properties.getProperty("keystroe_storePassword")
            keyAlias properties.getProperty("keystroe_keyAlias")
            keyPassword properties.getProperty("keystroe_keyPassword")
        }
    }*/



    buildTypes {
        release {
            // 版本名前缀
            //versionNameSuffix "-relase"
            // 开启ZipAlign优化
            //zipAlignEnabled true
            // 移除无用的resource文件
            //shrinkResources true
            // 使用release签名
            //signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // 渠道Flavors，配置不同的渠道
    productFlavors {
       /* GooglePaly {
            //指定这个渠道的版本号
            versionCode 2
            versionName "2.0"
            //指定区别于其他渠道的 applicationId
            applicationId "com.mainiway.eworkpal.hd"
        }
        xiaomi {}
        umeng {}
        qihu360 {}
        wandoujia {}
        yingyongbao {}*/
        //其他...
    }


    android{

        /*applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    File outputDirectory = new File(outputFile.parent);
                    def fileName
                    if (variant.buildType.name == "release") {
                        fileName = "app_v${defaultConfig.versionName}_${packageTime()}_${variant.productFlavors[0].name}.apk"
                    } else {
                        fileName = "app_v${defaultConfig.versionName}_${packageTime()}_debug.apk"
                    }
                    fileName = "app_v${defaultConfig.versionName}_${packageTime()}.apk"
                    output.outputFile = new File(outputDirectory, fileName)
                }
            }
        }*/

    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':okhttplibrary')
    compile project(':progressordialog')
    compile project(':material-spinner-1.0.5')//测试，待移除
    compile project(':imagepicker')
    compile project(':baseadapter-library')
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"//测试，待移除
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"//测试，待移除
    compile 'com.google.code.gson:gson:2.5'
    compile 'com.github.bumptech.glide:glide:3.7.0'
}
